import numpy as np 
import pandas as pd 
from pandas import Series, DataFrame
from keras.models import Sequential, load_model
from keras.layers import Dense
import tensorflow as tf
import scipy
import sklearn 
from sklearn import preprocessing 
from sklearn.preprocessing import scale
from sklearn.preprocessing import StandardScaler 
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer

new_athletes2 = pd.read_csv('new_athletes2.csv')
new_athletes2 = new_athletes2.drop(labels ='dob',axis=1)
new_athletes2 = new_athletes2.drop(labels ='days',axis=1)
new_athletes2.head()

new_athletes2.drop(new_athletes2[new_athletes2['medals'] == 0.0].index[0:9000], inplace = True)
new_athletes2

new_athletes = new_athletes2
new_athletes.isnull().sum()
#trains the categorical values
new_athletes['id'].fillna(new_athletes['id'].mode()[0], inplace = True)
new_athletes['name'].fillna(new_athletes['name'].mode()[0], inplace = True)
new_athletes['nationality'].fillna(new_athletes['nationality'].mode()[0], inplace = True)
new_athletes['sex'].fillna(new_athletes['sex'].mode()[0], inplace = True)
new_athletes['height'].fillna(new_athletes['height'].mode()[0], inplace = True)
new_athletes['weight'].fillna(new_athletes['weight'].mode()[0], inplace = True)
new_athletes['sport'].fillna(new_athletes['sport'].mode()[0], inplace = True)
new_athletes['gold'].fillna(new_athletes['gold'].mode()[0], inplace = True)
new_athletes['silver'].fillna(new_athletes['silver'].mode()[0], inplace = True)
new_athletes['bronze'].fillna(new_athletes['bronze'].mode()[0], inplace = True)
new_athletes['medals'].fillna(new_athletes['medals'].mode()[0], inplace = True)
new_athletes['age'].fillna(new_athletes['age'].mode()[0], inplace = True)
new_athletes.isnull().sum



from sklearn.preprocessing import LabelEncoder
lb_make = LabelEncoder()
new_athletes['sex'] = lb_make.fit_transform(new_athletes.sex.values)
new_athletes['sport'] = lb_make.fit_transform(new_athletes.sport.values)
new_athletes['nationality'] = lb_make.fit_transform(new_athletes.nationality.values)

features = [ 'sex','height', 'weight', 'nationality', 'age','sport']
x = new_athletes.loc[:, features]

# Separating out the target
y = new_athletes.loc[:,['medals']]

#traning the model
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.20, random_state=0)


X_train=np.asarray(X_train).astype(np.float32)
X_test=np.asarray(X_test).astype(np.float32)
Y_train=np.asarray(Y_train).astype(np.float32)
Y_test=np.asarray(Y_test).astype(np.float32)

print(type(X_train), X_train.size, X_train.shape)
print(type(Y_train), Y_train.size, Y_train.shape)
print(type(X_test), X_test.size, X_test.shape)
print(type(Y_test), Y_test.size, Y_test.shape)

from keras.utils import np_utils
encoder = LabelEncoder()
encoder.fit(Y_train)
encoded_Y = encoder.transform(Y_train)
# convert integers to dummy variables (i.e. one hot encoded)
dummy_y = np_utils.to_categorical(encoded_Y)


model = Sequential()
model.add(Dense(20, input_dim=6, activation='relu'))
model.add(Dense(27, activation='relu'))
#model.add(Dense(9, activation='sigmoid'))
model.add(Dense(20, activation='relu'))
model.add(Dense(29, activation='relu'))
model.add(Dense(29, activation='relu'))
model.add(Dense(29, activation='relu'))
#model.add(Dense(12, activation='relu'))
model.add(Dense(4, activation='softmax'))



model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()


from keras.models import load_model

model.save('my_model.h5')




